#include "game.h"
//#include "splashState.h" //enlever le commentaire lors de l’appel du spashState
// à enlever après
#include "mainMenuState.h"
#include "gameState.h"
#include <time.h>
#include <stdlib.h>


game::game(int width, int height, string title)
{

	
	//todo création d’un 1er état de jeu (1ère fenêtre)
	//_data->machine.addState(stateRef(new splashState(_data)));

	//todo enlever après dans le splashstate
	_data->machine.addState(stateRef(new mainMenuState(_data)));

	//crÃ©ation de la fenÃªtre qui changera de contenu selon la state crÃ©Ã©e ensuite
	_data->window.create(VideoMode(width, height), title, Style::Fullscreen);
	_data->window.setFramerateLimit(60);
	_data->machine.addState(stateRef(new gameState(_data)));


	run();
}
//le game loop de tout jeu fonctionne comme suit : on exÃ©cute Ã  chaque loop la mÃ©thode
//processStateChanges qui vÃ©rifie si on ajoute, on modifie ou on retire une state pour ensuite
//ajuster le temps passÃ© et exÃ©cuter des traitements particuliers Ã  chaque (1/60sec)
//ces traitements sont gÃ©rer par la state machine. Ensuite, on dessine les changements
void game::run()
{
	float newTime, frameTime, interpolation;
	float currentTime = _clock.getElapsedTime().asSeconds();
	float accumulator = 0.0f;
	while (_data->window.isOpen())
	{
		_data->machine.processStateChanges(); //vÃ©rifie si on a des changements
		
		newTime = _clock.getElapsedTime().asSeconds();
		frameTime = newTime - currentTime;

		if (frameTime > 0.25f) {	//si on dÃ©passe le quart de seconde, on ajuste
			frameTime = 0.25f;		//a .25 seconde pour le calcul de accumulator
		}
		currentTime = newTime;		 //new time devient le current time
		
		accumulator += frameTime;		//accumulator accumule tous les frameTimes
		
		while (accumulator >= dt) {		//si on dÃ©passe le temps du frame (1/60 de seconde)
										//on vÃ©rifie les Ã©vÃ©nements et on update la fenÃªtre
			_data->machine.getActiveState()->handleInput();
			_data->machine.getActiveState()->update(dt);
			accumulator -= dt;			//on retire dt de lâ€™accumulator pour lâ€™interpolation
		}
		interpolation = accumulator / dt; //le temps dâ€™exÃ©cution de la loop pour le draw
		_data->machine.getActiveState()->draw(interpolation);
	}
}